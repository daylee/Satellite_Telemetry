This file contains a rough script of what will be said in the AIAA SciTech presentation recording.
Written by Zachary Luppen.

Slide 1 (Intro): Hello, my name is Zachary Luppen. In this presentation I'll be discussing our manuscript titled, "A Case Study in Formal Specification and Runtime Verification of a CubeSat Communications System." Let's get into it!

Slide 2 (CubeSats): Cube satellites are a relatively new platform for studying space. They are small, compact satellites that are very popular with developers due to low cost and fast turnarounds. Throughout our study, we refer to all flavors of small satellites as CubeSats.

Slide 3 (Motivation): CubeSats are miniature satellites and they still experience many of the issues that large satellites see. Communications systems are extremely important since it's required in order to transmit information and telemetry to the ground. If the communication system fails, that can halt a mission or end it entirely, so communication failures are pretty serious. And it turns out that communication system failures are one of the most common types of failures experienced by CubeSat missions. For this reason, as CubeSats continue to grow in populate, it's going to be necessary to verify and validate their systems.

Slide 4 (CubeSat Communications System): To explore this idea, we developed a communications system model using Matlab and Simulink. This model consists of a virtual CubeSat orbiting the Earth. We calculate when communication is viable between the CubeSat and a virtual ground station using the Link Equation in the orbital simulation part of the model. This determination is then used in the communications simulation to operate a USRP B210 SDR's transmitter and receiver, broadcasting a sample telemetry dataset. More on this in a moment. Both parts of this model output related datasets, one containing orbital information and the other comprised of telemetry transmissions.

Slide 5 (Model): The actual setup of this system is shown here. For simplification, we used a single USRP B210 connected to a single PC since it can transmit and receive simultaneously.

Slide 6 (Sample Telemetry): The Universal Software Radio Peripheral (USRP) B210 Software Defined Radio transmits a short sample telemetry message each time the orbital simulation indicates that communication has been made viable. This telemetry message contains a dozen parameters describing ID information or radio parameters describing a theoretical system on-board the CubeSat.

Slide 7 (Verification of Datasets): Now we would like to verify that the information in these datasets is sensible. To do this we must first formally specify the requirements, encoding each into a temporal logic statement. Then we perform runtime verification with these specifications to actually examine if each specification is satisfied.

Slide 8 (MLTL): For this case study, our requirements were encoded into mission-time linear temporal logic (MLTL). We found this logic to fit perfectly for describing CubeSat requirements, owing to it reasoning over integer-bounded timelines, with Boolean connectives and temporal connectives. A few of these operators are shown here.

Slide 9 (R2U2): We use the Realizable, Responsive, Unobtrusive Unit or (R2U2) as our RV engine for this study. CubeSats are known for having pretty low computing power, so an unobtrusive tool is very necessary to perform RV for such projects. R2U2 also possesses a scalable framework, allowing for expansion of this case study in the future.

Slide 10 (Model 2): We can now look at our full setup. Once we receive the orbital and telemetry datasets, we run them through R2U2 with our specifications to determine if they're satisfied. As stated on the 

Slide 11 (Results 1): We'll now take a look at two specifications in detail and the corresponding RV output. Our first specification states that communication between the spacecraft and ground station can only occur when the spacecraft is above the horizon, i.e., line-of-sight is apparent. This is encoded into an MLTL specification with two atomic propositions, one saying that the CONNECTION status is active (1), and one saying that the ELEVATION is above 0. We then develop a spec saying globally, phi2 implies phi1. Note that we also implement a temporal operator 0,3 to account for occasional off-nominal data points. Comparing the orbital data of the CONNECTION against this specification, as shown on the left side of this figure, we see that it is satisfied at all time steps for a nominal dataset. On the right side, we purposefully injected faults to check if the RV output would detect a violation, which it did.

Slide 12 (Results 2): Now we examine a specification measuring a voltage line in the telemetry set. This specification states that the Radio's 3.3V line msut not vary more than 10% from its desired 3.3V value. It also mustn't vary more than .5V from the previous time step. This is encoded into an MLTL specifications with three propositions, one saying the voltage must not exceed a maximum, one saying it cannot go below a minimum, and one checking the previous time step. We then develop a spec saying globally, phi1 and phi2 and psi must be true. Again, a temporal operator 0,3 is used to account for occasional off-nominal data points. On the left side of the figure, we see a nominal dataset, which R2U2 verifies to be satisfying this spec. In the center, we see a couple off-nominal data points. However, a fault is not flagged because of the temporal operators. On the right side of the figure, we simulate a failure of the voltage line, and R2U2 correctly identifies a fault.

Slide 13 (Contributions): With this paper, we develop a reference set of formal specifications in mission-time linear tempora logic (MLTL) that describe A CubeSat communications system. We detail our validation of these specs, and discuss patterns we observed while writing and revising them. We further discuss lessons learned from validating these specs that will inform future CubeSat RV efforts.

Slide 15 (Future Work 1): In future work, we will apply our methods to other CubeSat subsystems, exploring their requirements. We also plan to investigate analyzing a full CubeSat telemetry dataset, since we minimized the telemetry message for this case study. And of course, we hope to eventually apply these methods to a real CubeSat, ultimately demonstrating that verification and validation can lend to better performance.

Thank you!

Slide 14 (Conclusion): In conclusion, we've explored the integration of formal specification and runtime verification into a CubeSat communications system, a novel topic. We show that formally specifying the system and performing runtime verification can detect system faults. If a fault on a real CubeSat were detected, then with this method, a special message could be sent to the ground station operators describing exactly what's wrong.